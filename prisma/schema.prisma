generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  cnic      String @unique
  password String

  name      String
  phone     String?

  address   String?

  isOwner    Boolean @default(false)

  branches UserBranch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserBranch {
  id        Int       @id @default(autoincrement())
  userId    Int
  branchId  Int
  role      UserRole
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@map("user_branches")
}

enum UserRole {
  admin
  manager
  agent
}

model Hotel {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  email        String?       @unique
  website      String?
  socialLinks  Json?
  businessCard String?
  letterHead   String?
  phone        String?
  branches     Branch[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("hotels")
}

model Branch {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  email        String?
  phone        String?
  hotelId      Int
  hotel        Hotel         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  staff        UserBranch[]
  rooms        Room[]
  resources    Resource[]
  reservations Reservation[]

  @@map("branches")
}

model Room {
  id         Int    @id @default(autoincrement())
  roomNumber String
  branchId   Int
  branch     Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  roomType String
  bedType  String
  capacity Int
  price    Int
  status   RoomStatus

  description String?
  photos      RoomPhotos[]

  roomResources RoomResource[]

  reservations Reservation[]

  @@unique([roomNumber, branchId])
  @@map("rooms")
}

enum RoomStatus {
  available
  booked
  under_maintainance
}

model RoomPhotos {
  id     Int    @id @default(autoincrement())
  url    String
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_photos")
}

model Resource {
  id       Int          @id @default(autoincrement())
  name     String
  type     ResourceType
  branchId Int
  branch   Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)

  reusable      Boolean
  quantity      Int
  defaultCharge Float       @default(0.0)
  chargeType    ChargeType?

  roomResources        RoomResource[]
  reservationResources ReservationResource[]

  @@map("resources")
}

enum ResourceType {
  amenity
  facility
}

enum ChargeType {
  internal
  external
}

model RoomResource {
  id     Int  @id @default(autoincrement())
  roomId Int
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  quantity Int

  Damages Damage[]

  @@map("room_resources")
}

model ReservationResource {
  id            Int         @id @default(autoincrement())
  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  quantity Int

  Damages Damage[]

  @@map("reservation_resources")
}

model Damage {
  id Int @id @default(autoincrement())

  reservationResourceId Int?
  reservationResource   ReservationResource? @relation(fields: [reservationResourceId], references: [id], onDelete: Cascade)

  roomResourceId Int?
  roomResource   RoomResource? @relation(fields: [roomResourceId], references: [id], onDelete: Cascade)

  damagedQuantity Int

  reportedBy Int
  reportedAt DateTime @default(now())

  status DamageStatus
  notes  String?

  @@map("damage_reports")
}

enum DamageStatus {
  pending
  under_repair
  replaced
}

model Guest {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?       @unique
  phone        String?
  cnic         String?       @unique
  passport     String?
  dateOfBirth  DateTime?
  address      String?
  nationality  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]

  @@map("guests")
}

model Reservation {
  id          Int   @id @default(autoincrement())
  guestId     Int
  guest       Guest @relation(fields: [guestId], references: [id], onDelete: Cascade)
  totalGuests Int

  roomId Int
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  branchId Int
  branch   Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  checkInDate  DateTime
  checkOutDate DateTime

  stayDuration Float?

  status              ReservationStatus
  ReservationResource ReservationResource[]

  paymentStatus PaymentStatus

  payments Payment[]

  totalAmount Float @default(0.0)
  paidAmount  Float @default(0.0)
  balance     Float @default(0.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reservations")
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
  checked_in
  checked_out
}

model Payment {
  id Int @id @default(autoincrement())

  reservationId Int
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  relatedEntityId   Int?
  type              PaymentType
  description       String
  amount            Float
  tax               Float
  additionalCharges Float
  totalAmount       Float
}

enum PaymentType {
  guest_payment
  room_charges
  resource_charges
  damage_charges
}

enum PaymentStatus {
  unpaid
  paid
}
